import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { isUnauthorizedError } from "@/lib/authUtils";

interface ScanResult {
  vulnerabilities: Array<{
    type: string;
    severity: "low" | "medium" | "high" | "critical";
    line?: number;
    column?: number;
    message: string;
    suggestion?: string;
    confidence: number;
  }>;
  securityScore: number;
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
}

const SUPPORTED_LANGUAGES = [
  { value: "javascript", label: "JavaScript" },
  { value: "typescript", label: "TypeScript" },
  { value: "python", label: "Python" },
  { value: "java", label: "Java" },
  { value: "php", label: "PHP" },
  { value: "csharp", label: "C#" },
  { value: "cpp", label: "C++" },
  { value: "c", label: "C" },
  { value: "go", label: "Go" },
  { value: "ruby", label: "Ruby" },
  { value: "sql", label: "SQL" }
];

const SAMPLE_CODE = {
  javascript: `// Sample vulnerable JavaScript code
const express = require('express');
const mysql = require('mysql');
const app = express();

app.post('/login', (req, res) => {
  const query = 'SELECT * FROM users WHERE email = "' + req.body.email + '"';
  db.query(query, (err, results) => {
    if (results.length > 0) {
      res.json({ success: true });
    }
  });
});`,
  
  python: `# Sample vulnerable Python code
import sqlite3
from flask import Flask, request

app = Flask(__name__)

@app.route('/search', methods=['POST'])
def search():
    query = request.form['query']
    # SQL Injection vulnerability
    sql = f"SELECT * FROM products WHERE name LIKE '%{query}%'"
    conn = sqlite3.connect('database.db')
    results = conn.execute(sql).fetchall()
    return str(results)`,
    
  php: `<?php
// Sample vulnerable PHP code
$password = "admin123"; // Hardcoded password

if ($_POST['action'] == 'login') {
    $user = $_POST['username'];
    // SQL Injection vulnerability
    $query = "SELECT * FROM users WHERE username = '$user'";
    $result = mysql_query($query);
    
    // XSS vulnerability
    echo "Welcome " . $_POST['username'];
}
?>`
};

export default function VulnerabilityScanner() {
  const [code, setCode] = useState("");
  const [language, setLanguage] = useState("javascript");
  const [fileName, setFileName] = useState("example.js");
  const [scanResults, setScanResults] = useState<ScanResult | null>(null);
  const [scanType, setScanType] = useState<"code" | "file" | "project">("code");
  const { toast } = useToast();

  const scanMutation = useMutation({
    mutationFn: async ({ code, language, fileName, scanType }: {
      code: string;
      language: string;
      fileName: string;
      scanType: string;
    }) => {
      const endpoint = scanType === "code" ? "/api/scan/code" : 
                     scanType === "file" ? "/api/scan/file" : "/api/scan/project";
      
      const body = scanType === "code" 
        ? { code, language, fileName }
        : scanType === "file"
        ? { filePath: fileName, content: code }
        : { projectId: 1 }; // Mock project ID for demo

      const response = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(body)
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(error);
      }
      
      return response.json();
    },
    onSuccess: (results) => {
      setScanResults(results);
      toast({
        title: "Scan completed",
        description: `Found ${results.vulnerabilities.length} vulnerabilities with score ${results.securityScore}/10`,
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error as Error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      
      toast({
        title: "Scan failed",
        description: "Unable to scan code. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleScan = () => {
    if (!code.trim()) {
      toast({
        title: "No code to scan",
        description: "Please enter some code to analyze.",
        variant: "destructive",
      });
      return;
    }

    scanMutation.mutate({ code, language, fileName, scanType });
  };

  const loadSampleCode = () => {
    const sample = SAMPLE_CODE[language as keyof typeof SAMPLE_CODE] || SAMPLE_CODE.javascript;
    setCode(sample);
    const extensions: Record<string, string> = {
      javascript: ".js",
      typescript: ".ts",
      python: ".py",
      java: ".java",
      php: ".php",
      csharp: ".cs",
      cpp: ".cpp",
      c: ".c",
      go: ".go",
      ruby: ".rb",
      sql: ".sql"
    };
    setFileName(`example${extensions[language] || ".txt"}`);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800";
      case "high": return "text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:border-orange-800";
      case "medium": return "text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800";
      case "low": return "text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800";
      default: return "text-gray-600 bg-gray-50 border-gray-200 dark:bg-gray-900/20 dark:border-gray-800";
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return "text-green-600";
    if (score >= 6) return "text-yellow-600";
    if (score >= 4) return "text-orange-600";
    return "text-red-600";
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <i className="fas fa-shield-alt mr-2 text-blue-600"></i>
            Vulnerability Scanner
          </CardTitle>
          <CardDescription>
            Analyze your code for security vulnerabilities using advanced pattern matching and AI-powered detection
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <Tabs value={scanType} onValueChange={(value) => setScanType(value as "code" | "file" | "project")}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="code">Code Snippet</TabsTrigger>
              <TabsTrigger value="file">Single File</TabsTrigger>
              <TabsTrigger value="project">Entire Project</TabsTrigger>
            </TabsList>

            <TabsContent value="code" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="language">Programming Language</Label>
                  <Select value={language} onValueChange={setLanguage}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {SUPPORTED_LANGUAGES.map((lang) => (
                        <SelectItem key={lang.value} value={lang.value}>
                          {lang.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="fileName">File Name (Optional)</Label>
                  <input
                    id="fileName"
                    type="text"
                    value={fileName}
                    onChange={(e) => setFileName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    placeholder="example.js"
                  />
                </div>
                
                <div className="flex items-end">
                  <Button variant="outline" onClick={loadSampleCode} className="w-full">
                    <i className="fas fa-code mr-2"></i>
                    Load Sample
                  </Button>
                </div>
              </div>
              
              <div>
                <Label htmlFor="code">Code to Analyze</Label>
                <Textarea
                  id="code"
                  value={code}
                  onChange={(e) => setCode(e.target.value)}
                  placeholder="Paste your code here for security analysis..."
                  className="min-h-64 font-mono text-sm"
                />
              </div>
            </TabsContent>

            <TabsContent value="file" className="space-y-4">
              <div className="text-center py-8 text-muted-foreground">
                <i className="fas fa-upload text-4xl mb-4"></i>
                <h3 className="text-lg font-semibold mb-2">File Upload</h3>
                <p>Upload a single file for vulnerability analysis</p>
                <Button className="mt-4" disabled>
                  <i className="fas fa-upload mr-2"></i>
                  Choose File (Coming Soon)
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="project" className="space-y-4">
              <div className="text-center py-8 text-muted-foreground">
                <i className="fas fa-folder-open text-4xl mb-4"></i>
                <h3 className="text-lg font-semibold mb-2">Project Analysis</h3>
                <p>Analyze an entire project repository for security issues</p>
                <Button className="mt-4" disabled>
                  <i className="fas fa-folder-open mr-2"></i>
                  Select Project (Coming Soon)
                </Button>
              </div>
            </TabsContent>
          </Tabs>

          <div className="flex items-center justify-between pt-4 border-t">
            <div className="flex items-center space-x-4">
              <Button 
                onClick={handleScan}
                disabled={scanMutation.isPending || !code.trim()}
                className="min-w-32"
              >
                <i className="fas fa-search mr-2"></i>
                {scanMutation.isPending ? "Scanning..." : "Scan Code"}
              </Button>
              
              {scanMutation.isPending && (
                <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                  <span>Analyzing code for vulnerabilities...</span>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Scan Results */}
      {scanResults && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Scan Results</span>
              <div className="flex items-center space-x-4">
                <div className="text-right">
                  <div className={`text-2xl font-bold ${getScoreColor(scanResults.securityScore)}`}>
                    {scanResults.securityScore}/10
                  </div>
                  <div className="text-sm text-muted-foreground">Security Score</div>
                </div>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Security Score Progress */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Security Score</span>
                <span className={getScoreColor(scanResults.securityScore)}>
                  {scanResults.securityScore}/10
                </span>
              </div>
              <Progress value={scanResults.securityScore * 10} className="h-2" />
            </div>

            {/* Summary */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">{scanResults.summary.critical}</div>
                <div className="text-sm text-muted-foreground">Critical</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">{scanResults.summary.high}</div>
                <div className="text-sm text-muted-foreground">High</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600">{scanResults.summary.medium}</div>
                <div className="text-sm text-muted-foreground">Medium</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{scanResults.summary.low}</div>
                <div className="text-sm text-muted-foreground">Low</div>
              </div>
            </div>

            {/* Vulnerabilities */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">
                Vulnerabilities Found ({scanResults.vulnerabilities.length})
              </h3>
              
              {scanResults.vulnerabilities.length > 0 ? (
                <div className="space-y-3">
                  {scanResults.vulnerabilities.map((vuln, index) => (
                    <div key={index} className={`p-4 rounded-lg border ${getSeverityColor(vuln.severity)}`}>
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline" className="uppercase text-xs">
                            {vuln.severity}
                          </Badge>
                          <h4 className="font-semibold">{vuln.type}</h4>
                        </div>
                        <div className="text-right text-sm text-muted-foreground">
                          {vuln.line && (
                            <div>Line {vuln.line}</div>
                          )}
                          <div>Confidence: {Math.round(vuln.confidence * 100)}%</div>
                        </div>
                      </div>
                      
                      <p className="text-sm mb-3">{vuln.message}</p>
                      
                      {vuln.suggestion && (
                        <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded text-sm">
                          <strong className="text-blue-700 dark:text-blue-400">Suggested Fix:</strong>
                          <p className="mt-1 text-blue-600 dark:text-blue-300">{vuln.suggestion}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <i className="fas fa-shield-check text-green-500 text-4xl mb-4"></i>
                  <h3 className="text-lg font-semibold mb-2 text-green-600">No Vulnerabilities Found!</h3>
                  <p>Your code appears to be secure based on our analysis.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
