import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { motion } from "framer-motion";
import { 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Info, 
  ExternalLink,
  Copy,
  Lightbulb,
  Code,
  Shield,
  TrendingUp,
  Filter
} from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { toast } from "@/hooks/use-toast";

interface VulnerabilityPanelProps {
  scanId: number | null;
}

interface Vulnerability {
  id: number;
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  lineNumber?: number;
  columnNumber?: number;
  codeSnippet?: string;
  suggestion: string;
  confidence: number;
  isFixed: boolean;
  detectionMethod: string;
  createdAt: string;
}

export function VulnerabilityPanel({ scanId }: VulnerabilityPanelProps) {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [severityFilter, setSeverityFilter] = useState<string>("all");
  const [showFixed, setShowFixed] = useState(false);

  const queryClient = useQueryClient();

  // Fetch vulnerabilities for the scan
  const { data: vulnerabilities = [], isLoading } = useQuery({
    queryKey: ["/api/scans", scanId, "vulnerabilities"],
    queryFn: () => scanId ? fetch(`/api/scans/${scanId}/vulnerabilities`).then(r => r.json()) : [],
    enabled: !!scanId,
  });

  // Mark vulnerability as fixed
  const markFixedMutation = useMutation({
    mutationFn: async (vulnerabilityId: number) => {
      const response = await apiRequest("PATCH", `/api/vulnerabilities/${vulnerabilityId}/fix`);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Vulnerability Marked as Fixed",
        description: "The vulnerability has been marked as resolved.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/scans", scanId, "vulnerabilities"] });
    },
    onError: (error) => {
      toast({
        title: "Failed to Update",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 dark:text-red-400';
      case 'high': return 'text-orange-600 dark:text-orange-400';
      case 'medium': return 'text-yellow-600 dark:text-yellow-400';
      case 'low': return 'text-blue-600 dark:text-blue-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };

  const getSeverityBadgeVariant = (severity: string): "destructive" | "default" | "secondary" | "outline" => {
    switch (severity) {
      case 'critical':
      case 'high': 
        return 'destructive';
      case 'medium': 
        return 'default';
      case 'low': 
        return 'secondary';
      default: 
        return 'outline';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return XCircle;
      case 'medium':
        return AlertTriangle;
      case 'low':
        return Info;
      default:
        return AlertTriangle;
    }
  };

  const formatVulnerabilityType = (type: string) => {
    return type
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  const copyCodeSnippet = (code: string) => {
    navigator.clipboard.writeText(code);
    toast({
      title: "Copied to Clipboard",
      description: "Code snippet has been copied.",
    });
  };

  const filteredVulnerabilities = vulnerabilities.filter((vuln: Vulnerability) => {
    if (!showFixed && vuln.isFixed) return false;
    if (severityFilter !== "all" && vuln.severity !== severityFilter) return false;
    return true;
  });

  const vulnerabilityStats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter((v: Vulnerability) => v.severity === 'critical').length,
    high: vulnerabilities.filter((v: Vulnerability) => v.severity === 'high').length,
    medium: vulnerabilities.filter((v: Vulnerability) => v.severity === 'medium').length,
    low: vulnerabilities.filter((v: Vulnerability) => v.severity === 'low').length,
    fixed: vulnerabilities.filter((v: Vulnerability) => v.isFixed).length,
  };

  const securityScore = scanId ? Math.max(0, 10 - (vulnerabilityStats.critical * 2 + vulnerabilityStats.high * 1.5 + vulnerabilityStats.medium * 1 + vulnerabilityStats.low * 0.5)) : 0;

  if (!scanId) {
    return (
      <div className="w-80 bg-muted/30 border-l border-border flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center max-w-xs"
        >
          <Shield className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
          <h3 className="text-lg font-semibold mb-2">Security Analysis</h3>
          <p className="text-muted-foreground text-sm">
            Start a vulnerability scan to see security analysis results here.
          </p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="w-80 bg-background border-l border-border flex flex-col h-full">
      {/* Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-center justify-between mb-3">
          <h3 className="font-semibold">Security Analysis</h3>
          <Button variant="ghost" size="sm">
            <Filter className="w-4 h-4" />
          </Button>
        </div>

        {/* Security Score */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-muted/50 rounded-lg p-3 mb-3"
        >
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">Security Score</span>
            <span className="text-lg font-bold">{securityScore.toFixed(1)}/10</span>
          </div>
          <Progress value={securityScore * 10} className="h-2 mb-2" />
          <div className="flex items-center text-xs text-muted-foreground">
            <TrendingUp className="w-3 h-3 mr-1" />
            <span>Based on {vulnerabilityStats.total} issues found</span>
          </div>
        </motion.div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="text-center p-2 bg-red-50 dark:bg-red-950/20 rounded">
            <div className="font-semibold text-red-600 dark:text-red-400">
              {vulnerabilityStats.critical + vulnerabilityStats.high}
            </div>
            <div className="text-muted-foreground">High Priority</div>
          </div>
          <div className="text-center p-2 bg-yellow-50 dark:bg-yellow-950/20 rounded">
            <div className="font-semibold text-yellow-600 dark:text-yellow-400">
              {vulnerabilityStats.medium + vulnerabilityStats.low}
            </div>
            <div className="text-muted-foreground">Low Priority</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="p-4 border-b border-border">
        <div className="space-y-2">
          <select
            className="w-full text-xs bg-background border border-border rounded px-2 py-1"
            value={severityFilter}
            onChange={(e) => setSeverityFilter(e.target.value)}
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
          
          <label className="flex items-center space-x-2 text-xs">
            <input
              type="checkbox"
              checked={showFixed}
              onChange={(e) => setShowFixed(e.target.checked)}
              className="rounded"
            />
            <span>Show fixed issues</span>
          </label>
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="flex-1 overflow-hidden">
        <Tabs defaultValue="list" className="h-full flex flex-col">
          <TabsList className="grid w-full grid-cols-2 m-2">
            <TabsTrigger value="list" className="text-xs">List</TabsTrigger>
            <TabsTrigger value="details" className="text-xs">Details</TabsTrigger>
          </TabsList>

          <TabsContent value="list" className="flex-1 overflow-hidden m-0">
            <ScrollArea className="h-full">
              {isLoading ? (
                <div className="p-4 text-center">
                  <div className="animate-spin w-5 h-5 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2"></div>
                  <p className="text-xs text-muted-foreground">Loading vulnerabilities...</p>
                </div>
              ) : filteredVulnerabilities.length === 0 ? (
                <div className="p-4 text-center">
                  <CheckCircle className="w-8 h-8 mx-auto mb-2 text-green-500" />
                  <p className="text-xs text-muted-foreground">
                    {vulnerabilities.length === 0 ? "No vulnerabilities found" : "All issues resolved"}
                  </p>
                </div>
              ) : (
                <div className="p-2 space-y-2">
                  {filteredVulnerabilities.map((vulnerability: Vulnerability, index: number) => {
                    const Icon = getSeverityIcon(vulnerability.severity);
                    return (
                      <motion.div
                        key={vulnerability.id}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.05 }}
                        className={`vulnerability-${vulnerability.severity} p-3 rounded-lg cursor-pointer hover:shadow-sm transition-shadow`}
                        onClick={() => setSelectedVulnerability(vulnerability)}
                      >
                        <div className="flex items-start space-x-2">
                          <Icon className={`w-4 h-4 mt-0.5 ${getSeverityColor(vulnerability.severity)}`} />
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <Badge 
                                variant={getSeverityBadgeVariant(vulnerability.severity)}
                                className="text-xs"
                              >
                                {vulnerability.severity.toUpperCase()}
                              </Badge>
                              {vulnerability.isFixed && (
                                <CheckCircle className="w-3 h-3 text-green-500" />
                              )}
                            </div>
                            <h4 className="font-medium text-sm line-clamp-2">
                              {vulnerability.title}
                            </h4>
                            <p className="text-xs text-muted-foreground mt-1">
                              {formatVulnerabilityType(vulnerability.type)}
                              {vulnerability.lineNumber && ` • Line ${vulnerability.lineNumber}`}
                            </p>
                            <div className="flex items-center justify-between mt-2 text-xs">
                              <span className="text-muted-foreground">
                                Confidence: {Math.round(vulnerability.confidence * 100)}%
                              </span>
                              <Badge variant="outline" className="text-xs">
                                {vulnerability.detectionMethod}
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    );
                  })}
                </div>
              )}
            </ScrollArea>
          </TabsContent>

          <TabsContent value="details" className="flex-1 overflow-hidden m-0">
            <ScrollArea className="h-full">
              {selectedVulnerability ? (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="p-4"
                >
                  <div className="space-y-4">
                    {/* Header */}
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <Badge variant={getSeverityBadgeVariant(selectedVulnerability.severity)}>
                          {selectedVulnerability.severity.toUpperCase()}
                        </Badge>
                        {!selectedVulnerability.isFixed && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => markFixedMutation.mutate(selectedVulnerability.id)}
                            disabled={markFixedMutation.isPending}
                            className="text-xs h-6"
                          >
                            Mark Fixed
                          </Button>
                        )}
                      </div>
                      <h3 className="font-semibold text-sm">{selectedVulnerability.title}</h3>
                      <p className="text-xs text-muted-foreground">
                        {formatVulnerabilityType(selectedVulnerability.type)}
                      </p>
                    </div>

                    {/* Description */}
                    <div>
                      <h4 className="font-medium text-xs mb-1 flex items-center">
                        <Info className="w-3 h-3 mr-1" />
                        Description
                      </h4>
                      <p className="text-xs text-muted-foreground">
                        {selectedVulnerability.description}
                      </p>
                    </div>

                    {/* Location */}
                    {selectedVulnerability.lineNumber && (
                      <div>
                        <h4 className="font-medium text-xs mb-1">Location</h4>
                        <p className="text-xs text-muted-foreground">
                          Line {selectedVulnerability.lineNumber}
                          {selectedVulnerability.columnNumber && `, Column ${selectedVulnerability.columnNumber}`}
                        </p>
                      </div>
                    )}

                    {/* Code Snippet */}
                    {selectedVulnerability.codeSnippet && (
                      <div>
                        <div className="flex items-center justify-between mb-1">
                          <h4 className="font-medium text-xs flex items-center">
                            <Code className="w-3 h-3 mr-1" />
                            Code Snippet
                          </h4>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => copyCodeSnippet(selectedVulnerability.codeSnippet!)}
                            className="h-5 w-5 p-0"
                          >
                            <Copy className="w-3 h-3" />
                          </Button>
                        </div>
                        <div className="bg-muted/50 rounded p-2 font-mono text-xs">
                          <pre className="whitespace-pre-wrap">
                            {selectedVulnerability.codeSnippet}
                          </pre>
                        </div>
                      </div>
                    )}

                    {/* Suggestion */}
                    <div>
                      <h4 className="font-medium text-xs mb-1 flex items-center">
                        <Lightbulb className="w-3 h-3 mr-1" />
                        Suggested Fix
                      </h4>
                      <p className="text-xs text-muted-foreground">
                        {selectedVulnerability.suggestion}
                      </p>
                    </div>

                    {/* Metadata */}
                    <div className="space-y-2 pt-2 border-t border-border">
                      <div className="flex justify-between text-xs">
                        <span className="text-muted-foreground">Confidence:</span>
                        <span>{Math.round(selectedVulnerability.confidence * 100)}%</span>
                      </div>
                      <div className="flex justify-between text-xs">
                        <span className="text-muted-foreground">Detection:</span>
                        <span>{selectedVulnerability.detectionMethod}</span>
                      </div>
                      <div className="flex justify-between text-xs">
                        <span className="text-muted-foreground">Found:</span>
                        <span>{new Date(selectedVulnerability.createdAt).toLocaleDateString()}</span>
                      </div>
                    </div>

                    {/* External Links */}
                    <div>
                      <Button variant="outline" size="sm" className="w-full text-xs h-7">
                        <ExternalLink className="w-3 h-3 mr-1" />
                        Learn More
                      </Button>
                    </div>
                  </div>
                </motion.div>
              ) : (
                <div className="p-4 text-center">
                  <AlertTriangle className="w-8 h-8 mx-auto mb-2 text-muted-foreground" />
                  <p className="text-xs text-muted-foreground">
                    Select a vulnerability to view details
                  </p>
                </div>
              )}
            </ScrollArea>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
